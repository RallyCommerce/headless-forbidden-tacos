import { LitElement } from 'lit';
/**
 *
 * Rally tooltip element
 *
 */
export declare class TooltipElement extends LitElement {
    message: string;
    /**
     *
     * Tooltip custom class
     *
     */
    tooltipClass: string;
    /**
     *
     * Tooltip and tooltip arrow indicator position relative to parent element
     *
     * Possible values:
     * "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right", "left", "left-top", "left-bottom", "right", "right-top", "right-bottom"
     *
     * Default value is "top"
     *
     */
    placement: string;
    /**
     *
     * Specifies events that should trigger the tooltip. Supports a space separated list of event names and colon separated list of `open events:close events`
     * Default value is "hover"
     *
     * e.g. "hover keydown.enter:blur keydown.escape"
     *
     */
    triggers: string;
    /**
     *
     * Specifies tooltip visibility
     *
     * Default value is `false`
     *
     */
    isOpen: boolean;
    /**
     *
     * Specifies whether to use slide&fade animation when toggling tooltip visibility
     *
     * Default value is `false`
     *
     */
    animation: boolean;
    static styles: import("lit").CSSResult;
    render(): import("lit-html").TemplateResult<1>;
    handleKeydown(event: any): void;
    handleMouseOver(): void;
    handleMouseOut(): void;
    handleClick(): void;
    private hideTooltip;
    private showTooltip;
    private toggleTooltip;
    private getTriggers;
    private getTooltipAction;
    private getOpenKeyTriggers;
    private getCloseKeyTriggers;
}
export declare enum TooltipTrigger {
    Hover = "hover",
    Blur = "blur",
    Keydown = "keydown",
    Click = "click"
}
export declare enum TooltipActionType {
    Open = "open",
    Close = "close"
}
declare global {
    interface HTMLElementTagNameMap {
        'rally-tooltip': TooltipElement;
    }
}
