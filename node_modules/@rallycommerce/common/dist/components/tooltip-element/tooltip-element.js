var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, html, css } from 'lit';
import { customElement, property } from 'lit/decorators.js';
import { classMap } from 'lit/directives/class-map.js';
/**
 *
 * Rally tooltip element
 *
 */
let TooltipElement = class TooltipElement extends LitElement {
    constructor() {
        super(...arguments);
        this.message = '';
        /**
         *
         * Tooltip custom class
         *
         */
        this.tooltipClass = '';
        /**
         *
         * Tooltip and tooltip arrow indicator position relative to parent element
         *
         * Possible values:
         * "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right", "left", "left-top", "left-bottom", "right", "right-top", "right-bottom"
         *
         * Default value is "top"
         *
         */
        this.placement = 'top';
        /**
         *
         * Specifies events that should trigger the tooltip. Supports a space separated list of event names and colon separated list of `open events:close events`
         * Default value is "hover"
         *
         * e.g. "hover keydown.enter:blur keydown.escape"
         *
         */
        this.triggers = 'hover';
        /**
         *
         * Specifies tooltip visibility
         *
         * Default value is `false`
         *
         */
        this.isOpen = false;
        /**
         *
         * Specifies whether to use slide&fade animation when toggling tooltip visibility
         *
         * Default value is `false`
         *
         */
        this.animation = false;
    }
    render() {
        const dynamicClasses = { 'rally-tooltip-active': this.isOpen, 'rally-tooltip-animation': this.animation };
        return html `
      <div class="rally-tooltip ${classMap(dynamicClasses)}">
        <div class="rally-tooltip-container rally-tooltip-container--${this.placement} ${this.tooltipClass}">
          <div class="rally-tooltip-popup">${this.message}</div>
        </div>
        <div 
          class="rally-tooltip-trigger"
          @mouseover="${() => { this.handleMouseOver(); }}"
          @mouseout="${() => { this.handleMouseOut(); }}"
          @keydown="${(event) => { this.handleKeydown(event); }}"
          @click="${() => { this.handleClick(); }}">
          <slot></slot>
        </div>
      </div>
    `;
    }
    handleKeydown(event) {
        if (this.getTriggers().open.includes(TooltipTrigger.Keydown) && this.getOpenKeyTriggers().includes(event.key.toLowerCase())) {
            this.showTooltip();
        }
        if (this.getTriggers().close.includes(TooltipTrigger.Keydown) && this.getCloseKeyTriggers().includes(event.key.toLowerCase())) {
            this.hideTooltip();
        }
    }
    handleMouseOver() {
        if (this.getTriggers().open.includes(TooltipTrigger.Hover)) {
            this.showTooltip();
        }
    }
    handleMouseOut() {
        if (this.getTriggers().close.includes(TooltipTrigger.Hover) || this.getTriggers().close.includes(TooltipTrigger.Blur)) {
            this.hideTooltip();
        }
    }
    handleClick() {
        if (this.getTriggers().open.includes(TooltipTrigger.Click) || this.getTriggers().close.includes(TooltipTrigger.Click)) {
            this.toggleTooltip();
        }
    }
    hideTooltip() {
        this.isOpen = false;
    }
    showTooltip() {
        this.isOpen = true;
    }
    toggleTooltip() {
        this.isOpen = !this.isOpen;
    }
    getTriggers() {
        let open = this.getTooltipAction(TooltipActionType.Open);
        let close = this.getTooltipAction(TooltipActionType.Close);
        return { open, close };
    }
    getTooltipAction(tooltipActionType) {
        if (this.triggers.includes(':')) {
            return tooltipActionType === TooltipActionType.Open ? this.triggers.split(':')[0] : this.triggers.split(':')[1];
        }
        else {
            return this.triggers;
        }
    }
    getOpenKeyTriggers() {
        let openKeyTriggersArray = [];
        const openActionsArray = this.getTriggers().open.split(' ');
        openActionsArray.forEach((action) => {
            if (action.includes('.')) {
                openKeyTriggersArray.push(action.split('.')[1].toLowerCase());
            }
        });
        return openKeyTriggersArray;
    }
    getCloseKeyTriggers() {
        let closeKeyTriggersArray = [];
        const closeActionsArray = this.getTriggers().close.split(' ');
        closeActionsArray.forEach((action) => {
            if (action.includes('.')) {
                closeKeyTriggersArray.push(action.split('.')[1].toLowerCase());
            }
        });
        return closeKeyTriggersArray;
    }
};
TooltipElement.styles = css `
    .rally-tooltip {
      position: relative;
      z-index: unset;
      display: inline-block;
    }

    .rally-tooltip-container {
      display: none;
      position: absolute;
      z-index: 9999;
      width: 280px;
    }

    .rally-tooltip-container::before {
      content: "";
      display: block;
      width: 0; 
      height: 0; 
      border-left: 10px solid transparent;
      border-right: 10px solid transparent;
      border-top: 10px solid rgba(34, 31, 32, 0.9);
      position: absolute;
    }

    .rally-tooltip-container--bottom {
      top: calc(100% + 10px);
      left: 50%;
      transform: translateX(-50%);
    }

    .rally-tooltip-container--bottom::before {
      top: -10px;
      left: 50%;
    }

    .rally-tooltip-container--bottom-left {
      top: calc(100% + 10px);
      left: 0;
    }

    .rally-tooltip-container--bottom-left::before {
      top: -10px;
      left: 15px;
    }

    .rally-tooltip-container--bottom-right {
      top: calc(100% + 10px);
      right: 0;
    }

    .rally-tooltip-container--bottom-right::before {
      top: -10px;
      right: 10px;
    }

    .rally-tooltip-container--bottom::before, 
    .rally-tooltip-container--bottom-left::before,
    .rally-tooltip-container--bottom-right::before{
      border-bottom: 10px solid rgba(34, 31, 32, 0.9);
      border-top: none;
    }

    .rally-tooltip-animation .rally-tooltip-container--bottom,
    .rally-tooltip-animation .rally-tooltip-container--bottom-left,
    .rally-tooltip-animation .rally-tooltip-container--bottom-right {
      animation: 
      tooltip-fade 0.2s,
      tooltip-slide-bottom 0.2s ease;
    }

    .rally-tooltip-container--top {
      bottom: calc(100% + 10px);
      left: 50%;
      transform: translateX(-50%);
    }

    .rally-tooltip-container--top::before {
      top: auto;
      bottom: -10px;
      left: 50%;
    }

    .rally-tooltip-container--top-left {
      bottom: calc(100% + 10px);
      left: 0;
    }

    .rally-tooltip-container--top-left::before {
      top: auto;
      bottom: -10px;
      left: 15px;
    }

    .rally-tooltip-container--top-right {
      bottom: calc(100% + 10px);
      right: 0;
    }

    .rally-tooltip-container--top-right::before {
      top: auto;
      bottom: -10px;
      right: 10px;
    }

    .rally-tooltip-animation .rally-tooltip-container--top,
    .rally-tooltip-animation .rally-tooltip-container--top-left,
    .rally-tooltip-animation .rally-tooltip-container--top-right {
      animation: 
      tooltip-fade 0.2s,
      tooltip-slide-top 0.2s ease;
    }

    .rally-tooltip-container--left {
      right: calc(100% + 10px);
      top: 50%;
      transform: translateY(-50%);
    }

    .rally-tooltip-container--left::before {
      right: -10px;
      top: 50%;
      transform: translateY(-50%);
    }

    .rally-tooltip-container--left-top {
      right: calc(100% + 10px);
      bottom: 0;
    }

    .rally-tooltip-container--left-top::before {
      right: -10px;
      bottom: 9px;
    }

    .rally-tooltip-container--left-bottom {
      right: calc(100% + 10px);
      top: 0;
    }

    .rally-tooltip-container--left-bottom::before {
      right: -10px;
      top: 9px;
    }

    .rally-tooltip-container--left::before,
    .rally-tooltip-container--left-top::before,
    .rally-tooltip-container--left-bottom::before {
      border-bottom: 10px solid transparent;
      border-top: 10px solid transparent;
      border-left: 10px solid rgba(34, 31, 32, 0.9);
      border-right: none;
    }

    .rally-tooltip-animation .rally-tooltip-container--left,
    .rally-tooltip-animation .rally-tooltip-container--left-top,
    .rally-tooltip-animation .rally-tooltip-container--left-bottom {
      animation:
      tooltip-fade 0.2s,
      tooltip-slide-left 0.2s ease;
    }

    .rally-tooltip-container--right {
      left: calc(100% + 10px);
      top: 50%;
      transform: translateY(-50%);
    }

    .rally-tooltip-container--right::before {
      left: -10px;
      top: 50%;
      transform: translateY(-50%);
    }

    .rally-tooltip-container--right-bottom {
      left: calc(100% + 10px);
      top: 0;
      transform: none;
    }

    .rally-tooltip-container--right-bottom::before {
      left: -10px;
      top: 10px;
    }

    .rally-tooltip-container--right-top {
      left: calc(100% + 10px);
      bottom: 0;
    }

    .rally-tooltip-container--right-top::before {
      left: -10px;
      bottom: 9px;
    }

    .rally-tooltip-container--right::before,
    .rally-tooltip-container--right-top::before,
    .rally-tooltip-container--right-bottom::before {
      border-bottom: 10px solid transparent;
      border-top: 10px solid transparent;
      border-right: 10px solid rgba(34, 31, 32, 0.9);
      border-left: none;
    }

    .rally-tooltip-animation .rally-tooltip-container--right,
    .rally-tooltip-animation .rally-tooltip-container--right-top
    .rally-tooltip-animation .rally-tooltip-container--right-bottom {
      animation:
      tooltip-fade 0.2s,
      tooltip-slide-right 0.2s ease;
    }

    .rally-tooltip-trigger {
      display: inline-block;
      position: relative;
      z-index: 1;
    }

    .rally-tooltip-popup {
      background: rgba(34, 31, 32, 0.9);
      box-shadow: 0px 9px 25px rgba(0, 0, 0, 0.15);
      border-radius: 4px;
      padding: 15px;
      text-align: center;
      color: #ffffff;
      font-weight: 500;
      font-size: 14px;
      line-height: 18px;
    }

    .rally-tooltip-active .rally-tooltip-container {
      display: block;
    }

    .rally-tooltip-active .rally-tooltip-container::before {
      z-index: 3;
    }

    @keyframes tooltip-fade {
      from {opacity: 0}
      to {opacity: 1}
    }

    @keyframes tooltip-slide-bottom {
      from { top: 100% }
      to { top: calc(100% + 10px)}
    }

    @keyframes tooltip-slide-top {
      from { bottom: 100% }
      to { bottom: calc(100% + 10px) }
    }

    @keyframes tooltip-slide-left {
      from { right: 100% }
      to { right: calc(100% + 10px) }
    }

    @keyframes tooltip-slide-right {
      from { left: 100% }
      to { left: calc(100% + 10px) }
    }
  `;
__decorate([
    property()
], TooltipElement.prototype, "message", void 0);
__decorate([
    property()
], TooltipElement.prototype, "tooltipClass", void 0);
__decorate([
    property()
], TooltipElement.prototype, "placement", void 0);
__decorate([
    property()
], TooltipElement.prototype, "triggers", void 0);
__decorate([
    property()
], TooltipElement.prototype, "isOpen", void 0);
__decorate([
    property()
], TooltipElement.prototype, "animation", void 0);
TooltipElement = __decorate([
    customElement('rally-tooltip')
], TooltipElement);
export { TooltipElement };
export var TooltipTrigger;
(function (TooltipTrigger) {
    TooltipTrigger["Hover"] = "hover";
    TooltipTrigger["Blur"] = "blur";
    TooltipTrigger["Keydown"] = "keydown";
    TooltipTrigger["Click"] = "click";
})(TooltipTrigger || (TooltipTrigger = {}));
export var TooltipActionType;
(function (TooltipActionType) {
    TooltipActionType["Open"] = "open";
    TooltipActionType["Close"] = "close";
})(TooltipActionType || (TooltipActionType = {}));
//# sourceMappingURL=tooltip-element.js.map