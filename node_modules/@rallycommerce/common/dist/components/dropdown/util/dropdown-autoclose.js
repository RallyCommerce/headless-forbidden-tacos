import { fromEvent, race } from 'rxjs';
import { delay, filter, map, takeUntil, tap, withLatestFrom } from 'rxjs/operators';
import { Key } from './dropdown-utils';
const isContainedIn = (element, array) => array ? array.some(item => item.contains(element)) : false;
const matchesSelectorIfAny = (element, selector) => !selector || closest(element, selector) != null;
export var DropdownAutoCloseType;
(function (DropdownAutoCloseType) {
    DropdownAutoCloseType["Inside"] = "inside";
    DropdownAutoCloseType["Outside"] = "outside";
})(DropdownAutoCloseType || (DropdownAutoCloseType = {}));
export function closest(element, selector) {
    if (!selector) {
        return null;
    }
    if (typeof element.closest === 'undefined') {
        return null;
    }
    return element.closest(selector);
}
/**
 * Enables the dropdown menu to be closed on ESC and outside clicks.
 * @param document
 * @param type
 * @param close
 * @param closed$
 * @param insideElements
 * @param ignoreElements
 * @param insideSelector
 */
export function dropdownAutoClose(document, type, close, closed$, insideElements, ignoreElements, insideSelector) {
    // closing on ESC and outside clicks
    if (type) {
        const shouldCloseOnClick = (event) => {
            const element = event.target;
            if (event.button === 2 || isContainedIn(element, ignoreElements)) {
                return false;
            }
            if (type === DropdownAutoCloseType.Inside) {
                return isContainedIn(element, insideElements) && matchesSelectorIfAny(element, insideSelector);
            }
            else if (type === DropdownAutoCloseType.Outside) {
                return !isContainedIn(element, insideElements);
            }
            else /* if (type === true) */ {
                return matchesSelectorIfAny(element, insideSelector) || !isContainedIn(element, insideElements);
            }
        };
        const escapes$ = fromEvent(document, 'keydown')
            .pipe(takeUntil(closed$), 
        /* eslint-disable-next-line deprecation/deprecation */
        filter(e => e.which === Key.Escape), tap(e => e.preventDefault()));
        // we have to pre-calculate 'shouldCloseOnClick' on 'mousedown',
        // because on 'mouseup' DOM nodes might be detached
        const mouseDowns$ = fromEvent(document, 'mousedown').pipe(map(shouldCloseOnClick), takeUntil(closed$));
        const closeableClicks$ = fromEvent(document, 'mouseup')
            .pipe(withLatestFrom(mouseDowns$), filter(([_, shouldClose]) => shouldClose), delay(0), takeUntil(closed$));
        race([
            escapes$.pipe(map(_ => 0 /* ESCAPE */)), closeableClicks$.pipe(map(_ => 1 /* CLICK */))
        ]).subscribe((source) => close(source));
    }
}
//# sourceMappingURL=dropdown-autoclose.js.map