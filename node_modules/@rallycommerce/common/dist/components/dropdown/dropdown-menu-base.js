var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement, html, css } from 'lit';
import { customElement, property, queryAssignedElements } from 'lit/decorators.js';
import { DROPDOWN_ITEM_CLASS, DROPDOWN_DIVIDER_CLASS } from './util/dropdown-utils';
let RallyDropdownMenuBase = class RallyDropdownMenuBase extends LitElement {
    constructor() {
        super(...arguments);
        this.placement = null;
        this.isOpen = false;
    }
    connectedCallback() {
        super.connectedCallback();
        this.addEventListener('keydown', this.onKeyDown);
    }
    disconnectedCallback() {
        super.disconnectedCallback();
        this.removeEventListener('keydown', this.onKeyDown);
    }
    render() {
        var _a;
        const classes = {
            'dropdown-menu': true,
            'show': this.isOpen
        };
        if (this.placement) {
            classes[`dropdown-menu--${this.placement}`] = true;
        }
        Object.entries(classes).forEach(([key, value]) => {
            value ? this.classList.add(key) : this.classList.remove(key);
        });
        (_a = this.menuItems) === null || _a === void 0 ? void 0 : _a.forEach(item => {
            if (!item.classList.contains(DROPDOWN_DIVIDER_CLASS)) {
                item.classList.add(DROPDOWN_ITEM_CLASS);
            }
        });
        return html `<slot></slot>`;
    }
    onKeyDown(event) {
        const options = {
            detail: event,
            bubbles: true,
            composed: true
        };
        this.dispatchEvent(new CustomEvent('dropdownKeyDown', options));
    }
};
RallyDropdownMenuBase.styles = css `
  :host(.dropdown-menu) {
    position: absolute;
    z-index: 1000;
    display: none;
    min-width: 10rem;
    padding: 5px 0;
    margin: 0.125rem 0 0;
    text-align: left;
    list-style: none;
    background-clip: padding-box;
    box-shadow: 0px 8px 16px rgba(0, 0, 0, 0.1);
    border-radius: 6px;
    font-size: var(--font-size-sm, 14px);
    color: var(--black-color, #221f20);
    background-color: var(--white-color, #fff);
  }
  
  :host(.dropdown-menu.show) {
    display: block;
  }

  ::slotted(.dropdown-divider) {
    height: 0;
    margin: 0.5rem 0;
    overflow: hidden;
    border-top: 1px solid rgba(0, 0, 0, 0.15);
  }
  
  ::slotted(.dropdown-item) {
    display: block;
    box-sizing: border-box;
    width: 100%;
    padding: 8px 18px;
    clear: both;
    text-align: inherit;
    text-decoration: none;
    white-space: nowrap;
    background-color: transparent;
    border: 0;
    font-weight: var(--font-weight-default, 500);
    font-size: var(--font-size-xs, 12px) !important;
    color: var(--black-color, #221f20);
  }
  ::slotted(.dropdown-item:hover), ::slotted(.dropdown-item:focus) {
    background-color: rgba(34, 31, 32, 0.02);
  }
  ::slotted(.dropdown-item.active), ::slotted(.dropdown-item:active) {
    color: #fff;
    text-decoration: none;
  }
  ::slotted(.dropdown-item.disabled), ::slotted(.dropdown-item:disabled) {
    color: grey;
    pointer-events: none;
    background-color: transparent;
  }

  ::slotted(.dropdown-header) {
    display: block;
    padding: 0.5rem 1.5rem;
    margin-bottom: 0;
    color: grey;
    white-space: nowrap;
  }
  
  ::slotted(.dropdown-item-text) {
    display: block;
    padding: 0.25rem 1.5rem;
    color: grey;
  }

  :host(.dropdown-menu--bottom) {
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
  }
  
  :host(.dropdown-menu--bottom-left) {
    top: 100%;
    left: 0;
  }
  
  :host(.dropdown-menu--bottom-right) {
    top: 100%;
    right: 0;
  }
  
  :host(.dropdown-menu--top) {
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
  }
  :host(.dropdown-menu--top-left) {
    bottom: 100%;
    left: 0;
  }
  :host(.dropdown-menu--top-right) {
    bottom: 100%;
    right: 0;
  }
  
  :host(.dropdown-menu--left) {
    right: 100%;
    top: 50%;
    transform: translateY(-50%);
  }

  :host(.dropdown-menu--left-top) {
    right: 100%;
    top: 0;
  }

  :host(.dropdown-menu--left-bottom) {
    right: 100%;
    bottom: 0;
  }

  :host(.dropdown-menu--right) {
    left: 100%;
    top: 50%;
    transform: translateY(-50%);
  }
  :host(.dropdown-menu--right-top) {
    left: 100%;
    top: 0;
  }
  :host(.dropdown-menu--right-bottom) {
    left: 100%;
    bottom: 0;
  }
  `;
__decorate([
    property()
], RallyDropdownMenuBase.prototype, "placement", void 0);
__decorate([
    property({
        type: Boolean,
        converter: (value) => {
            return value === 'true';
        }
    })
], RallyDropdownMenuBase.prototype, "isOpen", void 0);
__decorate([
    queryAssignedElements()
], RallyDropdownMenuBase.prototype, "menuItems", void 0);
RallyDropdownMenuBase = __decorate([
    customElement('rally-dropdown-menu-base')
], RallyDropdownMenuBase);
export { RallyDropdownMenuBase };
//# sourceMappingURL=dropdown-menu-base.js.map