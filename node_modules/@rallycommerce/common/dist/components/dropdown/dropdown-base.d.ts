import { LitElement } from 'lit';
import { DropdownPlacement } from './util/dropdown-utils';
import { DropdownAutoCloseType } from './util/dropdown-autoclose';
/**
 *
 * Rally dropdown element. Must be used in conjuction with `rally-dropdown-menu-base` element.
 *
 * Example usage:
 * `
 *    <rally-dropdown-base placement="bottom-left">
 *      <button slot="dropdown-toggle">Bottom left</button>
 *      <rally-dropdown-menu-base>
 *        <button>Item 1</button>
 *        <button disabled>Item 2</button>
 *        <button>Item 3</button>
 *        <div class="dropdown-divider"></div>
 *        <div class="dropdown-item-text">Text item 4</div>
 *      </rally-dropdown-menu-base>
 *    </rally-dropdown-base>
 * `
 *
 */
export declare class RallyDropdownBase extends LitElement {
    static styles: import("lit").CSSResult;
    /**
     * Indicates whether the dropdown should be closed when clicking one of dropdown items or pressing ESC.
     *
     * * `true` - the dropdown will close on both outside and inside (menu) clicks.
     * * `false` - the dropdown can only be closed manually via `isOpen` property.
     * * `"inside"` - the dropdown will close on inside menu clicks, but not outside clicks.
     * * `"outside"` - the dropdown will close only on the outside clicks and not on menu clicks.
     *
     * Default value is "outside".
     */
    autoClose: boolean | DropdownAutoCloseType;
    /**
     * A custom class that is applied to the dropdown element.
     */
    dropdownClass: any;
    private isMenuOpen;
    /**
     * Defines whether or not the dropdown menu is opened initially.
     */
    set isOpen(value: boolean);
    get isOpen(): boolean;
    /**
     * The placement of the dropdown.
     *
     * Possible values:
     * "top", "top-left", "top-right", "bottom", "bottom-left", "bottom-right", "left", "left-top", "left-bottom", "right", "right-top", "right-bottom".
     *
     * Default value is "bottom".
     *
     */
    placement: DropdownPlacement;
    dropdownToggle: Array<HTMLElement>;
    dropdownToggleNode: Array<Node>;
    rlDropdownMenu: Array<HTMLElement>;
    private destroyCloseHandlers$;
    get menu(): HTMLElement | null;
    get anchor(): HTMLElement | null;
    get menuItems(): HTMLElement[];
    render(): import("lit-html").TemplateResult<1>;
    protected firstUpdated(): void;
    disconnectedCallback(): void;
    /**
     * Opens the dropdown menu.
     */
    open(): void;
    /**
     * Sets the close handlers for the dropdown menu.
     */
    private setCloseHandlers;
    /**
     * Closes the dropdown menu.
     */
    close(): void;
    /**
     * Toggles the dropdown menu.
     */
    toggle(): void;
    /**
     * Handles `keydown` event on the dropdown menu element.
     * @param customEvent
     */
    onMenuKeyDown(customEvent: any): void;
    /**
     * Handles `keydown` event on the dropdown element.
     * @param customEvent
     */
    onKeyDown(event: KeyboardEvent): void;
    private isDropup;
    private isEventFromToggle;
    private getMenuElements;
    /**
     * Applies a custom class to the dropdown element.
     * @param newClass
     * @param oldClass
     */
    private applyCustomDropdownClass;
    /**
     * Applies placement classes to the dropdown element.
     */
    private applyPlacementClasses;
    private setDropdownMenuAttribute;
    private setDropdownToggleAriaAttributes;
}
declare global {
    interface HTMLElementTagNameMap {
        'rally-dropdown-base': RallyDropdownBase;
    }
}
