export declare function areEqual(first: any, second: any, ignoreProperties?: string[], compareProperties?: string[]): boolean;
export declare function merge<T>(target: T, source: T | any, useCustomMerge?: boolean): T;
export declare const mergeValidators: (target: any, source: any, options?: any) => any;
export declare function generateUniqueId(prefix?: string): string;
export declare const runOnNextTick: (fn: () => void) => void;
export declare const runWithDelay: (fn: () => void, delay: number) => void;
export declare function objectPropertiesToArray<T>(myObj: any): T[];
export declare function objectKeysToArray(myObj: any): any[];
export declare function replaceWith(str: string, type: Convert, char?: string): string;
export declare function convertTo(obj: any, type?: Convert): any;
export declare function reverseString(initialString?: string): string;
export declare function getFormattedAmountWithCurrency(value: number | string | null, currencyConfig: Currency, showCurrencyCode?: boolean, excludeDecimalDigits?: boolean, suffix?: string): string;
export declare enum Convert {
    Underscore = "underscore",
    CamelCase = "camelCase"
}
export interface Currency {
    code: string;
    symbol: string;
    symbolPosition: 'before' | 'after';
    decimalDigits: number;
    decimalSeparator: string;
    thousandsSeparator: string;
}
