import { Observable, BehaviorSubject } from 'rxjs';
declare class CheckoutSessionService {
    clientId: BehaviorSubject<string>;
    config: Config;
    private checkoutUrl;
    private sessionData;
    private isInitialized;
    private isPrefetched;
    constructor();
    initialize(clientId: string, config: Config): void;
    getCheckoutUrl(cartId?: string): Observable<string | null>;
    getCheckoutSessionId(): string | null;
    isRedirectEnabled(): boolean;
    hasCheckoutUrl(): boolean;
    hasCartIdDefined(): boolean;
    applyCartData(fullCheckoutData?: FullCheckoutData): void;
    applyConfig(config?: Config): void;
    applyCustomerData(customerData?: CustomerData): void;
    encodeCustomerData(searchParams: URLSearchParams): void;
    get platformCart(): (() => Promise<any>) | undefined;
    private createSession;
    private prefetchCheckoutPage;
    private prepareSessionData;
}
export declare const session: CheckoutSessionService;
export interface Config {
    enableLoader?: boolean;
    redirect?: boolean;
    cartData: CartData;
    customerData?: CustomerData;
    cartId?: string;
    language?: string;
    forceFallback?: boolean;
    fallbackUrl?: string;
    fallbackButtonSelector?: string;
    customButtonClass?: string;
    customButtonText?: string;
    lineItems?: LineItem[];
    customActionsHandler: (actionType: ActionType, actionData?: any) => void;
}
export declare enum ActionType {
    Redirect = "redirect",
    Click = "click"
}
export interface CartData {
    id?: string;
    currency?: string;
    content?: any;
}
export interface FullCheckoutData extends CartData {
    customerData?: CustomerData;
}
export interface CustomerData {
    email?: string;
    firstName?: string;
    lastName?: string;
    shipping?: {
        externalId?: string;
        firstName?: string;
        lastName?: string;
        company?: string;
        address1?: string;
        address2?: string;
        city?: string;
        country?: string;
        countryCode?: string;
        province?: string;
        zip?: string;
        phone?: string;
    };
}
export interface SessionData {
    clientId?: string;
    cartId?: string;
    checkoutSessionId?: string;
    lineItems?: LineItem[];
    cartCurrency?: string;
    cart?: any;
}
interface LineItem {
    title: string;
    productId: string;
    image: string;
    inventoryManagement: string;
    inventoryQuantity: number;
    variants: Variant[];
}
interface Variant {
    title: string;
    image: string;
    position: number;
    variantId: string;
    inventoryQuantity: number;
    requiresShipping: boolean;
    price: number;
    discountedPrice: number;
    quantity: number;
    taxable: boolean;
}
export {};
//# sourceMappingURL=checkout-session.service.d.ts.map